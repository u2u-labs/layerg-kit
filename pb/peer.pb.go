//*
// The realtime protocol for LayerG server.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: peer.proto

package pb

import (
	api "github.com/u2u-labs/go-layerg-common/api"
	rtapi "github.com/u2u-labs/go-layerg-common/rtapi"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Recipienter_Role int32

const (
	Recipienter_SESSIONID Recipienter_Role = 0
	Recipienter_CHANNEL   Recipienter_Role = 1
	Recipienter_STREAM    Recipienter_Role = 2
	Recipienter_USERID    Recipienter_Role = 3
)

// Enum value maps for Recipienter_Role.
var (
	Recipienter_Role_name = map[int32]string{
		0: "SESSIONID",
		1: "CHANNEL",
		2: "STREAM",
		3: "USERID",
	}
	Recipienter_Role_value = map[string]int32{
		"SESSIONID": 0,
		"CHANNEL":   1,
		"STREAM":    2,
		"USERID":    3,
	}
)

func (x Recipienter_Role) Enum() *Recipienter_Role {
	p := new(Recipienter_Role)
	*p = x
	return p
}

func (x Recipienter_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Recipienter_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[0].Descriptor()
}

func (Recipienter_Role) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[0]
}

func (x Recipienter_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Recipienter_Role.Descriptor instead.
func (Recipienter_Role) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{1, 0}
}

type NodeMeta_Status int32

const (
	// 节点已停止
	NodeMeta_STOPED NodeMeta_Status = 0
	// 节点正常
	NodeMeta_OK NodeMeta_Status = 1
	// 节点维护中
	NodeMeta_MAINTENANCE NodeMeta_Status = 2
)

// Enum value maps for NodeMeta_Status.
var (
	NodeMeta_Status_name = map[int32]string{
		0: "STOPED",
		1: "OK",
		2: "MAINTENANCE",
	}
	NodeMeta_Status_value = map[string]int32{
		"STOPED":      0,
		"OK":          1,
		"MAINTENANCE": 2,
	}
)

func (x NodeMeta_Status) Enum() *NodeMeta_Status {
	p := new(NodeMeta_Status)
	*p = x
	return p
}

func (x NodeMeta_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeMeta_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[1].Descriptor()
}

func (NodeMeta_Status) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[1]
}

func (x NodeMeta_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeMeta_Status.Descriptor instead.
func (NodeMeta_Status) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{11, 0}
}

type NodeMeta_Balancer int32

const (
	// 随机
	NodeMeta_RANDOM NodeMeta_Balancer = 0
	// 循环
	NodeMeta_ROUNDROBIN NodeMeta_Balancer = 1
	// HASHRING
	NodeMeta_HASHRING NodeMeta_Balancer = 2
)

// Enum value maps for NodeMeta_Balancer.
var (
	NodeMeta_Balancer_name = map[int32]string{
		0: "RANDOM",
		1: "ROUNDROBIN",
		2: "HASHRING",
	}
	NodeMeta_Balancer_value = map[string]int32{
		"RANDOM":     0,
		"ROUNDROBIN": 1,
		"HASHRING":   2,
	}
)

func (x NodeMeta_Balancer) Enum() *NodeMeta_Balancer {
	p := new(NodeMeta_Balancer)
	*p = x
	return p
}

func (x NodeMeta_Balancer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeMeta_Balancer) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[2].Descriptor()
}

func (NodeMeta_Balancer) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[2]
}

func (x NodeMeta_Balancer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeMeta_Balancer.Descriptor instead.
func (NodeMeta_Balancer) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{11, 1}
}

type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0}
}

type Recipienter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action Recipienter_Role `protobuf:"varint,1,opt,name=action,proto3,enum=layerg.peer.Recipienter_Role" json:"action,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*Recipienter_Token
	//	*Recipienter_Stream
	Payload isRecipienter_Payload `protobuf_oneof:"payload"`
}

func (x *Recipienter) Reset() {
	*x = Recipienter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recipienter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipienter) ProtoMessage() {}

func (x *Recipienter) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipienter.ProtoReflect.Descriptor instead.
func (*Recipienter) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{1}
}

func (x *Recipienter) GetAction() Recipienter_Role {
	if x != nil {
		return x.Action
	}
	return Recipienter_SESSIONID
}

func (m *Recipienter) GetPayload() isRecipienter_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Recipienter) GetToken() string {
	if x, ok := x.GetPayload().(*Recipienter_Token); ok {
		return x.Token
	}
	return ""
}

func (x *Recipienter) GetStream() *PresenceStream {
	if x, ok := x.GetPayload().(*Recipienter_Stream); ok {
		return x.Stream
	}
	return nil
}

type isRecipienter_Payload interface {
	isRecipienter_Payload()
}

type Recipienter_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

type Recipienter_Stream struct {
	Stream *PresenceStream `protobuf:"bytes,3,opt,name=stream,proto3,oneof"`
}

func (*Recipienter_Token) isRecipienter_Payload() {}

func (*Recipienter_Stream) isRecipienter_Payload() {}

type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Inbox     string                 `protobuf:"bytes,2,opt,name=inbox,proto3" json:"inbox,omitempty"`
	Node      string                 `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*Frame_Envelope
	//	*Frame_BinaryLog
	//	*Frame_Status
	//	*Frame_Event
	Payload isFrame_Payload `protobuf_oneof:"payload"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{2}
}

func (x *Frame) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Frame) GetInbox() string {
	if x != nil {
		return x.Inbox
	}
	return ""
}

func (x *Frame) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *Frame) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *Frame) GetPayload() isFrame_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Frame) GetEnvelope() *Peer_Envelope {
	if x, ok := x.GetPayload().(*Frame_Envelope); ok {
		return x.Envelope
	}
	return nil
}

func (x *Frame) GetBinaryLog() *BinaryLog {
	if x, ok := x.GetPayload().(*Frame_BinaryLog); ok {
		return x.BinaryLog
	}
	return nil
}

func (x *Frame) GetStatus() *Status {
	if x, ok := x.GetPayload().(*Frame_Status); ok {
		return x.Status
	}
	return nil
}

func (x *Frame) GetEvent() *api.AnyRequest {
	if x, ok := x.GetPayload().(*Frame_Event); ok {
		return x.Event
	}
	return nil
}

type isFrame_Payload interface {
	isFrame_Payload()
}

type Frame_Envelope struct {
	Envelope *Peer_Envelope `protobuf:"bytes,5,opt,name=envelope,proto3,oneof"`
}

type Frame_BinaryLog struct {
	BinaryLog *BinaryLog `protobuf:"bytes,6,opt,name=binaryLog,proto3,oneof"`
}

type Frame_Status struct {
	Status *Status `protobuf:"bytes,7,opt,name=status,proto3,oneof"`
}

type Frame_Event struct {
	Event *api.AnyRequest `protobuf:"bytes,8,opt,name=event,proto3,oneof"`
}

func (*Frame_Envelope) isFrame_Payload() {}

func (*Frame_BinaryLog) isFrame_Payload() {}

func (*Frame_Status) isFrame_Payload() {}

func (*Frame_Event) isFrame_Payload() {}

type Disconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Ban       bool   `protobuf:"varint,2,opt,name=ban,proto3" json:"ban,omitempty"`
	Reason    uint32 `protobuf:"varint,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Disconnect) Reset() {
	*x = Disconnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disconnect) ProtoMessage() {}

func (x *Disconnect) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disconnect.ProtoReflect.Descriptor instead.
func (*Disconnect) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{3}
}

func (x *Disconnect) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Disconnect) GetBan() bool {
	if x != nil {
		return x.Ban
	}
	return false
}

func (x *Disconnect) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node  string       `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Nodes []*StateNode `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{4}
}

func (x *State) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *State) GetNodes() []*StateNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type StateNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node       string               `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Version    int64                `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Presences  []*Presence          `protobuf:"bytes,3,rep,name=Presences,proto3" json:"Presences,omitempty"`
	Matchmaker []*MatchmakerExtract `protobuf:"bytes,4,rep,name=matchmaker,proto3" json:"matchmaker,omitempty"`
}

func (x *StateNode) Reset() {
	*x = StateNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateNode) ProtoMessage() {}

func (x *StateNode) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateNode.ProtoReflect.Descriptor instead.
func (*StateNode) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{5}
}

func (x *StateNode) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *StateNode) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StateNode) GetPresences() []*Presence {
	if x != nil {
		return x.Presences
	}
	return nil
}

func (x *StateNode) GetMatchmaker() []*MatchmakerExtract {
	if x != nil {
		return x.Matchmaker
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Health         int32   `protobuf:"varint,2,opt,name=health,proto3" json:"health,omitempty"`
	SessionCount   int32   `protobuf:"varint,3,opt,name=sessionCount,proto3" json:"sessionCount,omitempty"`
	PresenceCount  int32   `protobuf:"varint,4,opt,name=presenceCount,proto3" json:"presenceCount,omitempty"`
	MatchCount     int32   `protobuf:"varint,5,opt,name=matchCount,proto3" json:"matchCount,omitempty"`
	GoroutineCount int32   `protobuf:"varint,6,opt,name=goroutineCount,proto3" json:"goroutineCount,omitempty"`
	AvgLatencyMs   float64 `protobuf:"fixed64,7,opt,name=avgLatencyMs,proto3" json:"avgLatencyMs,omitempty"`
	AvgRateSec     float64 `protobuf:"fixed64,8,opt,name=avgRateSec,proto3" json:"avgRateSec,omitempty"`
	AvgInputKbs    float64 `protobuf:"fixed64,9,opt,name=avgInputKbs,proto3" json:"avgInputKbs,omitempty"`
	AvgOutputKbs   float64 `protobuf:"fixed64,10,opt,name=avgOutputKbs,proto3" json:"avgOutputKbs,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{6}
}

func (x *Status) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Status) GetHealth() int32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *Status) GetSessionCount() int32 {
	if x != nil {
		return x.SessionCount
	}
	return 0
}

func (x *Status) GetPresenceCount() int32 {
	if x != nil {
		return x.PresenceCount
	}
	return 0
}

func (x *Status) GetMatchCount() int32 {
	if x != nil {
		return x.MatchCount
	}
	return 0
}

func (x *Status) GetGoroutineCount() int32 {
	if x != nil {
		return x.GoroutineCount
	}
	return 0
}

func (x *Status) GetAvgLatencyMs() float64 {
	if x != nil {
		return x.AvgLatencyMs
	}
	return 0
}

func (x *Status) GetAvgRateSec() float64 {
	if x != nil {
		return x.AvgRateSec
	}
	return 0
}

func (x *Status) GetAvgInputKbs() float64 {
	if x != nil {
		return x.AvgInputKbs
	}
	return 0
}

func (x *Status) GetAvgOutputKbs() float64 {
	if x != nil {
		return x.AvgOutputKbs
	}
	return 0
}

type PresenceID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Node      string `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *PresenceID) Reset() {
	*x = PresenceID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceID) ProtoMessage() {}

func (x *PresenceID) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceID.ProtoReflect.Descriptor instead.
func (*PresenceID) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{7}
}

func (x *PresenceID) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *PresenceID) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type Presence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string            `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	UserID    string            `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Stream    []*PresenceStream `protobuf:"bytes,3,rep,name=stream,proto3" json:"stream,omitempty"`
	Meta      []*PresenceMeta   `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty"`
	Node      string            `protobuf:"bytes,5,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *Presence) Reset() {
	*x = Presence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presence) ProtoMessage() {}

func (x *Presence) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presence.ProtoReflect.Descriptor instead.
func (*Presence) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{8}
}

func (x *Presence) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Presence) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Presence) GetStream() []*PresenceStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *Presence) GetMeta() []*PresenceMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Presence) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type PresenceStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode       uint32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Subject    string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Subcontext string `protobuf:"bytes,3,opt,name=subcontext,proto3" json:"subcontext,omitempty"`
	Label      string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *PresenceStream) Reset() {
	*x = PresenceStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceStream) ProtoMessage() {}

func (x *PresenceStream) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceStream.ProtoReflect.Descriptor instead.
func (*PresenceStream) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{9}
}

func (x *PresenceStream) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *PresenceStream) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *PresenceStream) GetSubcontext() string {
	if x != nil {
		return x.Subcontext
	}
	return ""
}

func (x *PresenceStream) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type PresenceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionFormat uint32 `protobuf:"varint,1,opt,name=sessionFormat,proto3" json:"sessionFormat,omitempty"`
	Hidden        bool   `protobuf:"varint,2,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Persistence   bool   `protobuf:"varint,3,opt,name=persistence,proto3" json:"persistence,omitempty"`
	Username      string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Status        string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Reason        uint32 `protobuf:"varint,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *PresenceMeta) Reset() {
	*x = PresenceMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceMeta) ProtoMessage() {}

func (x *PresenceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceMeta.ProtoReflect.Descriptor instead.
func (*PresenceMeta) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{10}
}

func (x *PresenceMeta) GetSessionFormat() uint32 {
	if x != nil {
		return x.SessionFormat
	}
	return 0
}

func (x *PresenceMeta) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *PresenceMeta) GetPersistence() bool {
	if x != nil {
		return x.Persistence
	}
	return false
}

func (x *PresenceMeta) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PresenceMeta) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PresenceMeta) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type NodeMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 节点名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 节点参数
	Vars map[string]string `protobuf:"bytes,2,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 节点IP
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// 节点端口
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// 节点服务角色
	Role string `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	// 节点状态
	Status NodeMeta_Status `protobuf:"varint,6,opt,name=status,proto3,enum=layerg.peer.NodeMeta_Status" json:"status,omitempty"`
	// 节点权重
	Weight int32 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	// 节点负载方式
	Balancer NodeMeta_Balancer `protobuf:"varint,8,opt,name=balancer,proto3,enum=layerg.peer.NodeMeta_Balancer" json:"balancer,omitempty"`
	// 允许流连接
	AllowStream bool `protobuf:"varint,9,opt,name=allowStream,proto3" json:"allowStream,omitempty"`
	// Leader
	Leader bool `protobuf:"varint,10,opt,name=leader,proto3" json:"leader,omitempty"`
}

func (x *NodeMeta) Reset() {
	*x = NodeMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMeta) ProtoMessage() {}

func (x *NodeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMeta.ProtoReflect.Descriptor instead.
func (*NodeMeta) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{11}
}

func (x *NodeMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeMeta) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *NodeMeta) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NodeMeta) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NodeMeta) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *NodeMeta) GetStatus() NodeMeta_Status {
	if x != nil {
		return x.Status
	}
	return NodeMeta_STOPED
}

func (x *NodeMeta) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *NodeMeta) GetBalancer() NodeMeta_Balancer {
	if x != nil {
		return x.Balancer
	}
	return NodeMeta_RANDOM
}

func (x *NodeMeta) GetAllowStream() bool {
	if x != nil {
		return x.AllowStream
	}
	return false
}

func (x *NodeMeta) GetLeader() bool {
	if x != nil {
		return x.Leader
	}
	return false
}

type BanValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *BanValue) Reset() {
	*x = BanValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanValue) ProtoMessage() {}

func (x *BanValue) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanValue.ProtoReflect.Descriptor instead.
func (*BanValue) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{12}
}

func (x *BanValue) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type UntrackValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string            `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	UserID    string            `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Stream    []*PresenceStream `protobuf:"bytes,3,rep,name=stream,proto3" json:"stream,omitempty"`
	Modes     []uint32          `protobuf:"varint,4,rep,packed,name=modes,proto3" json:"modes,omitempty"`
	Skip      *PresenceStream   `protobuf:"bytes,5,opt,name=skip,proto3" json:"skip,omitempty"`
	Reason    uint32            `protobuf:"varint,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *UntrackValue) Reset() {
	*x = UntrackValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UntrackValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UntrackValue) ProtoMessage() {}

func (x *UntrackValue) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UntrackValue.ProtoReflect.Descriptor instead.
func (*UntrackValue) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{13}
}

func (x *UntrackValue) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *UntrackValue) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UntrackValue) GetStream() []*PresenceStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *UntrackValue) GetModes() []uint32 {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *UntrackValue) GetSkip() *PresenceStream {
	if x != nil {
		return x.Skip
	}
	return nil
}

func (x *UntrackValue) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type MatchBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documents [][]byte `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
	Ids       []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *MatchBatch) Reset() {
	*x = MatchBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBatch) ProtoMessage() {}

func (x *MatchBatch) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBatch.ProtoReflect.Descriptor instead.
func (*MatchBatch) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{14}
}

func (x *MatchBatch) GetDocuments() [][]byte {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *MatchBatch) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type BinaryLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node    string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Version int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*BinaryLog_Track
	//	*BinaryLog_Untrack
	//	*BinaryLog_Ban
	//	*BinaryLog_UpdateTrack
	//	*BinaryLog_MatchmakerAdd
	//	*BinaryLog_MatchmakerRemoveSession
	//	*BinaryLog_MatchmakerRemoveSessionAll
	//	*BinaryLog_MatchmakerRemoveParty
	//	*BinaryLog_MatchmakerRemovePartyAll
	//	*BinaryLog_MatchmakerRemoveAll
	//	*BinaryLog_MatchmakerRemove
	Payload isBinaryLog_Payload `protobuf_oneof:"payload"`
}

func (x *BinaryLog) Reset() {
	*x = BinaryLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryLog) ProtoMessage() {}

func (x *BinaryLog) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryLog.ProtoReflect.Descriptor instead.
func (*BinaryLog) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{15}
}

func (x *BinaryLog) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *BinaryLog) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (m *BinaryLog) GetPayload() isBinaryLog_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *BinaryLog) GetTrack() *Presence {
	if x, ok := x.GetPayload().(*BinaryLog_Track); ok {
		return x.Track
	}
	return nil
}

func (x *BinaryLog) GetUntrack() *UntrackValue {
	if x, ok := x.GetPayload().(*BinaryLog_Untrack); ok {
		return x.Untrack
	}
	return nil
}

func (x *BinaryLog) GetBan() *BanValue {
	if x, ok := x.GetPayload().(*BinaryLog_Ban); ok {
		return x.Ban
	}
	return nil
}

func (x *BinaryLog) GetUpdateTrack() *Presence {
	if x, ok := x.GetPayload().(*BinaryLog_UpdateTrack); ok {
		return x.UpdateTrack
	}
	return nil
}

func (x *BinaryLog) GetMatchmakerAdd() *MatchmakerExtract {
	if x, ok := x.GetPayload().(*BinaryLog_MatchmakerAdd); ok {
		return x.MatchmakerAdd
	}
	return nil
}

func (x *BinaryLog) GetMatchmakerRemoveSession() *MatchmakerExtract {
	if x, ok := x.GetPayload().(*BinaryLog_MatchmakerRemoveSession); ok {
		return x.MatchmakerRemoveSession
	}
	return nil
}

func (x *BinaryLog) GetMatchmakerRemoveSessionAll() *MatchmakerExtract {
	if x, ok := x.GetPayload().(*BinaryLog_MatchmakerRemoveSessionAll); ok {
		return x.MatchmakerRemoveSessionAll
	}
	return nil
}

func (x *BinaryLog) GetMatchmakerRemoveParty() *MatchmakerExtract {
	if x, ok := x.GetPayload().(*BinaryLog_MatchmakerRemoveParty); ok {
		return x.MatchmakerRemoveParty
	}
	return nil
}

func (x *BinaryLog) GetMatchmakerRemovePartyAll() *MatchmakerExtract {
	if x, ok := x.GetPayload().(*BinaryLog_MatchmakerRemovePartyAll); ok {
		return x.MatchmakerRemovePartyAll
	}
	return nil
}

func (x *BinaryLog) GetMatchmakerRemoveAll() *MatchmakerExtract {
	if x, ok := x.GetPayload().(*BinaryLog_MatchmakerRemoveAll); ok {
		return x.MatchmakerRemoveAll
	}
	return nil
}

func (x *BinaryLog) GetMatchmakerRemove() *BinaryLog_PartyMatchmakerRemove {
	if x, ok := x.GetPayload().(*BinaryLog_MatchmakerRemove); ok {
		return x.MatchmakerRemove
	}
	return nil
}

type isBinaryLog_Payload interface {
	isBinaryLog_Payload()
}

type BinaryLog_Track struct {
	Track *Presence `protobuf:"bytes,3,opt,name=track,proto3,oneof"`
}

type BinaryLog_Untrack struct {
	Untrack *UntrackValue `protobuf:"bytes,4,opt,name=untrack,proto3,oneof"`
}

type BinaryLog_Ban struct {
	Ban *BanValue `protobuf:"bytes,5,opt,name=ban,proto3,oneof"`
}

type BinaryLog_UpdateTrack struct {
	UpdateTrack *Presence `protobuf:"bytes,6,opt,name=updateTrack,proto3,oneof"`
}

type BinaryLog_MatchmakerAdd struct {
	MatchmakerAdd *MatchmakerExtract `protobuf:"bytes,7,opt,name=MatchmakerAdd,proto3,oneof"`
}

type BinaryLog_MatchmakerRemoveSession struct {
	MatchmakerRemoveSession *MatchmakerExtract `protobuf:"bytes,8,opt,name=MatchmakerRemoveSession,proto3,oneof"`
}

type BinaryLog_MatchmakerRemoveSessionAll struct {
	MatchmakerRemoveSessionAll *MatchmakerExtract `protobuf:"bytes,9,opt,name=MatchmakerRemoveSessionAll,proto3,oneof"`
}

type BinaryLog_MatchmakerRemoveParty struct {
	MatchmakerRemoveParty *MatchmakerExtract `protobuf:"bytes,10,opt,name=MatchmakerRemoveParty,proto3,oneof"`
}

type BinaryLog_MatchmakerRemovePartyAll struct {
	MatchmakerRemovePartyAll *MatchmakerExtract `protobuf:"bytes,11,opt,name=MatchmakerRemovePartyAll,proto3,oneof"`
}

type BinaryLog_MatchmakerRemoveAll struct {
	MatchmakerRemoveAll *MatchmakerExtract `protobuf:"bytes,12,opt,name=MatchmakerRemoveAll,proto3,oneof"`
}

type BinaryLog_MatchmakerRemove struct {
	MatchmakerRemove *BinaryLog_PartyMatchmakerRemove `protobuf:"bytes,13,opt,name=MatchmakerRemove,proto3,oneof"`
}

func (*BinaryLog_Track) isBinaryLog_Payload() {}

func (*BinaryLog_Untrack) isBinaryLog_Payload() {}

func (*BinaryLog_Ban) isBinaryLog_Payload() {}

func (*BinaryLog_UpdateTrack) isBinaryLog_Payload() {}

func (*BinaryLog_MatchmakerAdd) isBinaryLog_Payload() {}

func (*BinaryLog_MatchmakerRemoveSession) isBinaryLog_Payload() {}

func (*BinaryLog_MatchmakerRemoveSessionAll) isBinaryLog_Payload() {}

func (*BinaryLog_MatchmakerRemoveParty) isBinaryLog_Payload() {}

func (*BinaryLog_MatchmakerRemovePartyAll) isBinaryLog_Payload() {}

func (*BinaryLog_MatchmakerRemoveAll) isBinaryLog_Payload() {}

func (*BinaryLog_MatchmakerRemove) isBinaryLog_Payload() {}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point map[string]uint64 `protobuf:"bytes,1,rep,name=point,proto3" json:"point,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{16}
}

func (x *Point) GetPoint() map[string]uint64 {
	if x != nil {
		return x.Point
	}
	return nil
}

type CheckPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[string]*Point `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheckPoint) Reset() {
	*x = CheckPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPoint) ProtoMessage() {}

func (x *CheckPoint) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPoint.ProtoReflect.Descriptor instead.
func (*CheckPoint) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{17}
}

func (x *CheckPoint) GetValue() map[string]*Point {
	if x != nil {
		return x.Value
	}
	return nil
}

type MatchmakerPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Username  string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Node      string `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *MatchmakerPresence) Reset() {
	*x = MatchmakerPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakerPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakerPresence) ProtoMessage() {}

func (x *MatchmakerPresence) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakerPresence.ProtoReflect.Descriptor instead.
func (*MatchmakerPresence) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{18}
}

func (x *MatchmakerPresence) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MatchmakerPresence) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MatchmakerPresence) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MatchmakerPresence) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type MatchmakerExtract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presences         []*MatchmakerPresence `protobuf:"bytes,1,rep,name=presences,proto3" json:"presences,omitempty"`
	SessionId         string                `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	PartyId           string                `protobuf:"bytes,3,opt,name=partyId,proto3" json:"partyId,omitempty"`
	Query             string                `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	MinCount          int32                 `protobuf:"varint,5,opt,name=minCount,proto3" json:"minCount,omitempty"`
	MaxCount          int32                 `protobuf:"varint,6,opt,name=maxCount,proto3" json:"maxCount,omitempty"`
	CountMultiple     int32                 `protobuf:"varint,7,opt,name=countMultiple,proto3" json:"countMultiple,omitempty"`
	StringProperties  map[string]string     `protobuf:"bytes,8,rep,name=stringProperties,proto3" json:"stringProperties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NumericProperties map[string]float64    `protobuf:"bytes,9,rep,name=numericProperties,proto3" json:"numericProperties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Ticket            string                `protobuf:"bytes,10,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Count             int32                 `protobuf:"varint,11,opt,name=count,proto3" json:"count,omitempty"`
	Intervals         int32                 `protobuf:"varint,12,opt,name=intervals,proto3" json:"intervals,omitempty"`
	CreatedAt         int64                 `protobuf:"varint,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Node              string                `protobuf:"bytes,14,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *MatchmakerExtract) Reset() {
	*x = MatchmakerExtract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakerExtract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakerExtract) ProtoMessage() {}

func (x *MatchmakerExtract) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakerExtract.ProtoReflect.Descriptor instead.
func (*MatchmakerExtract) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{19}
}

func (x *MatchmakerExtract) GetPresences() []*MatchmakerPresence {
	if x != nil {
		return x.Presences
	}
	return nil
}

func (x *MatchmakerExtract) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MatchmakerExtract) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *MatchmakerExtract) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *MatchmakerExtract) GetMinCount() int32 {
	if x != nil {
		return x.MinCount
	}
	return 0
}

func (x *MatchmakerExtract) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *MatchmakerExtract) GetCountMultiple() int32 {
	if x != nil {
		return x.CountMultiple
	}
	return 0
}

func (x *MatchmakerExtract) GetStringProperties() map[string]string {
	if x != nil {
		return x.StringProperties
	}
	return nil
}

func (x *MatchmakerExtract) GetNumericProperties() map[string]float64 {
	if x != nil {
		return x.NumericProperties
	}
	return nil
}

func (x *MatchmakerExtract) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *MatchmakerExtract) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MatchmakerExtract) GetIntervals() int32 {
	if x != nil {
		return x.Intervals
	}
	return 0
}

func (x *MatchmakerExtract) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MatchmakerExtract) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type MatchPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Username  string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Node      string `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`
	Reason    uint32 `protobuf:"varint,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *MatchPresence) Reset() {
	*x = MatchPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPresence) ProtoMessage() {}

func (x *MatchPresence) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPresence.ProtoReflect.Descriptor instead.
func (*MatchPresence) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{20}
}

func (x *MatchPresence) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MatchPresence) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MatchPresence) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MatchPresence) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *MatchPresence) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Party) Reset() {
	*x = Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{21}
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{22}
}

type Peer_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *Peer_Query) Reset() {
	*x = Peer_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer_Query) ProtoMessage() {}

func (x *Peer_Query) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer_Query.ProtoReflect.Descriptor instead.
func (*Peer_Query) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Peer_Query) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type Peer_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid     string                 `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Name    string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Header  map[string]string      `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Query   map[string]*Peer_Query `protobuf:"bytes,4,rep,name=query,proto3" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Context map[string]string      `protobuf:"bytes,5,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Payload:
	//
	//	*Peer_Request_BytesContent
	//	*Peer_Request_StringContent
	Payload isPeer_Request_Payload `protobuf_oneof:"payload"`
}

func (x *Peer_Request) Reset() {
	*x = Peer_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer_Request) ProtoMessage() {}

func (x *Peer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer_Request.ProtoReflect.Descriptor instead.
func (*Peer_Request) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Peer_Request) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *Peer_Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Peer_Request) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Peer_Request) GetQuery() map[string]*Peer_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *Peer_Request) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (m *Peer_Request) GetPayload() isPeer_Request_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Peer_Request) GetBytesContent() []byte {
	if x, ok := x.GetPayload().(*Peer_Request_BytesContent); ok {
		return x.BytesContent
	}
	return nil
}

func (x *Peer_Request) GetStringContent() string {
	if x, ok := x.GetPayload().(*Peer_Request_StringContent); ok {
		return x.StringContent
	}
	return ""
}

type isPeer_Request_Payload interface {
	isPeer_Request_Payload()
}

type Peer_Request_BytesContent struct {
	BytesContent []byte `protobuf:"bytes,6,opt,name=bytesContent,proto3,oneof"`
}

type Peer_Request_StringContent struct {
	StringContent string `protobuf:"bytes,7,opt,name=stringContent,proto3,oneof"`
}

func (*Peer_Request_BytesContent) isPeer_Request_Payload() {}

func (*Peer_Request_StringContent) isPeer_Request_Payload() {}

type Peer_ResponseWriter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid       string            `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Header    map[string]string `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Context   map[string]string `protobuf:"bytes,4,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Recipient []*Recipienter    `protobuf:"bytes,5,rep,name=recipient,proto3" json:"recipient,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*Peer_ResponseWriter_BytesContent
	//	*Peer_ResponseWriter_StringContent
	//	*Peer_ResponseWriter_Notifications
	Payload isPeer_ResponseWriter_Payload `protobuf_oneof:"payload"`
}

func (x *Peer_ResponseWriter) Reset() {
	*x = Peer_ResponseWriter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer_ResponseWriter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer_ResponseWriter) ProtoMessage() {}

func (x *Peer_ResponseWriter) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer_ResponseWriter.ProtoReflect.Descriptor instead.
func (*Peer_ResponseWriter) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Peer_ResponseWriter) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *Peer_ResponseWriter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Peer_ResponseWriter) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Peer_ResponseWriter) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Peer_ResponseWriter) GetRecipient() []*Recipienter {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (m *Peer_ResponseWriter) GetPayload() isPeer_ResponseWriter_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Peer_ResponseWriter) GetBytesContent() []byte {
	if x, ok := x.GetPayload().(*Peer_ResponseWriter_BytesContent); ok {
		return x.BytesContent
	}
	return nil
}

func (x *Peer_ResponseWriter) GetStringContent() string {
	if x, ok := x.GetPayload().(*Peer_ResponseWriter_StringContent); ok {
		return x.StringContent
	}
	return ""
}

func (x *Peer_ResponseWriter) GetNotifications() *rtapi.Notifications {
	if x, ok := x.GetPayload().(*Peer_ResponseWriter_Notifications); ok {
		return x.Notifications
	}
	return nil
}

type isPeer_ResponseWriter_Payload interface {
	isPeer_ResponseWriter_Payload()
}

type Peer_ResponseWriter_BytesContent struct {
	BytesContent []byte `protobuf:"bytes,6,opt,name=bytesContent,proto3,oneof"`
}

type Peer_ResponseWriter_StringContent struct {
	StringContent string `protobuf:"bytes,7,opt,name=stringContent,proto3,oneof"`
}

type Peer_ResponseWriter_Notifications struct {
	Notifications *rtapi.Notifications `protobuf:"bytes,8,opt,name=notifications,proto3,oneof"`
}

func (*Peer_ResponseWriter_BytesContent) isPeer_ResponseWriter_Payload() {}

func (*Peer_ResponseWriter_StringContent) isPeer_ResponseWriter_Payload() {}

func (*Peer_ResponseWriter_Notifications) isPeer_ResponseWriter_Payload() {}

type Peer_Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid       string            `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Context   map[string]string `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Recipient []*Recipienter    `protobuf:"bytes,3,rep,name=recipient,proto3" json:"recipient,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*Peer_Envelope_SingleSocket
	//	*Peer_Envelope_Disconnect
	//	*Peer_Envelope_PartyJoinRequest
	//	*Peer_Envelope_PartyJoinRequestReply
	//	*Peer_Envelope_PartyPromote
	//	*Peer_Envelope_PartyAccept
	//	*Peer_Envelope_PartyRemove
	//	*Peer_Envelope_PartyClose
	//	*Peer_Envelope_PartyJoinRequestList
	//	*Peer_Envelope_PartyJoinRequestListReply
	//	*Peer_Envelope_PartyMatchmakerAdd
	//	*Peer_Envelope_PartyMatchmakerAddReply
	//	*Peer_Envelope_PartyMatchmakerRemove
	//	*Peer_Envelope_PartyDataSend
	//	*Peer_Envelope_MatchId
	//	*Peer_Envelope_MatchJoinAttempt
	//	*Peer_Envelope_MathJoinAttemptReply
	//	*Peer_Envelope_MatchSendData
	//	*Peer_Envelope_MatchSignal
	//	*Peer_Envelope_MatchState
	//	*Peer_Envelope_Match
	//	*Peer_Envelope_Error
	//	*Peer_Envelope_Ping
	//	*Peer_Envelope_Pong
	//	*Peer_Envelope_MatchSignalReply
	//	*Peer_Envelope_MatchStateReply
	//	*Peer_Envelope_NkEnvelope
	Payload isPeer_Envelope_Payload `protobuf_oneof:"payload"`
}

func (x *Peer_Envelope) Reset() {
	*x = Peer_Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer_Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer_Envelope) ProtoMessage() {}

func (x *Peer_Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer_Envelope.ProtoReflect.Descriptor instead.
func (*Peer_Envelope) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Peer_Envelope) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *Peer_Envelope) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Peer_Envelope) GetRecipient() []*Recipienter {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (m *Peer_Envelope) GetPayload() isPeer_Envelope_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Peer_Envelope) GetSingleSocket() string {
	if x, ok := x.GetPayload().(*Peer_Envelope_SingleSocket); ok {
		return x.SingleSocket
	}
	return ""
}

func (x *Peer_Envelope) GetDisconnect() *Disconnect {
	if x, ok := x.GetPayload().(*Peer_Envelope_Disconnect); ok {
		return x.Disconnect
	}
	return nil
}

func (x *Peer_Envelope) GetPartyJoinRequest() *Party_JoinRequest {
	if x, ok := x.GetPayload().(*Peer_Envelope_PartyJoinRequest); ok {
		return x.PartyJoinRequest
	}
	return nil
}

func (x *Peer_Envelope) GetPartyJoinRequestReply() bool {
	if x, ok := x.GetPayload().(*Peer_Envelope_PartyJoinRequestReply); ok {
		return x.PartyJoinRequestReply
	}
	return false
}

func (x *Peer_Envelope) GetPartyPromote() *Party_Promote {
	if x, ok := x.GetPayload().(*Peer_Envelope_PartyPromote); ok {
		return x.PartyPromote
	}
	return nil
}

func (x *Peer_Envelope) GetPartyAccept() *Party_Accept {
	if x, ok := x.GetPayload().(*Peer_Envelope_PartyAccept); ok {
		return x.PartyAccept
	}
	return nil
}

func (x *Peer_Envelope) GetPartyRemove() *Party_Remove {
	if x, ok := x.GetPayload().(*Peer_Envelope_PartyRemove); ok {
		return x.PartyRemove
	}
	return nil
}

func (x *Peer_Envelope) GetPartyClose() *Party_Close {
	if x, ok := x.GetPayload().(*Peer_Envelope_PartyClose); ok {
		return x.PartyClose
	}
	return nil
}

func (x *Peer_Envelope) GetPartyJoinRequestList() *Party_JoinRequestList {
	if x, ok := x.GetPayload().(*Peer_Envelope_PartyJoinRequestList); ok {
		return x.PartyJoinRequestList
	}
	return nil
}

func (x *Peer_Envelope) GetPartyJoinRequestListReply() *Party_JoinRequestListReply {
	if x, ok := x.GetPayload().(*Peer_Envelope_PartyJoinRequestListReply); ok {
		return x.PartyJoinRequestListReply
	}
	return nil
}

func (x *Peer_Envelope) GetPartyMatchmakerAdd() *Party_MatchmakerAdd {
	if x, ok := x.GetPayload().(*Peer_Envelope_PartyMatchmakerAdd); ok {
		return x.PartyMatchmakerAdd
	}
	return nil
}

func (x *Peer_Envelope) GetPartyMatchmakerAddReply() *Party_MatchmakerAddReply {
	if x, ok := x.GetPayload().(*Peer_Envelope_PartyMatchmakerAddReply); ok {
		return x.PartyMatchmakerAddReply
	}
	return nil
}

func (x *Peer_Envelope) GetPartyMatchmakerRemove() *Party_MatchmakerRemove {
	if x, ok := x.GetPayload().(*Peer_Envelope_PartyMatchmakerRemove); ok {
		return x.PartyMatchmakerRemove
	}
	return nil
}

func (x *Peer_Envelope) GetPartyDataSend() *Party_DataSend {
	if x, ok := x.GetPayload().(*Peer_Envelope_PartyDataSend); ok {
		return x.PartyDataSend
	}
	return nil
}

func (x *Peer_Envelope) GetMatchId() string {
	if x, ok := x.GetPayload().(*Peer_Envelope_MatchId); ok {
		return x.MatchId
	}
	return ""
}

func (x *Peer_Envelope) GetMatchJoinAttempt() *Match_JoinAttempt {
	if x, ok := x.GetPayload().(*Peer_Envelope_MatchJoinAttempt); ok {
		return x.MatchJoinAttempt
	}
	return nil
}

func (x *Peer_Envelope) GetMathJoinAttemptReply() *Match_JoinAttemptReply {
	if x, ok := x.GetPayload().(*Peer_Envelope_MathJoinAttemptReply); ok {
		return x.MathJoinAttemptReply
	}
	return nil
}

func (x *Peer_Envelope) GetMatchSendData() *Match_SendData {
	if x, ok := x.GetPayload().(*Peer_Envelope_MatchSendData); ok {
		return x.MatchSendData
	}
	return nil
}

func (x *Peer_Envelope) GetMatchSignal() *Match_Signal {
	if x, ok := x.GetPayload().(*Peer_Envelope_MatchSignal); ok {
		return x.MatchSignal
	}
	return nil
}

func (x *Peer_Envelope) GetMatchState() string {
	if x, ok := x.GetPayload().(*Peer_Envelope_MatchState); ok {
		return x.MatchState
	}
	return ""
}

func (x *Peer_Envelope) GetMatch() *api.Match {
	if x, ok := x.GetPayload().(*Peer_Envelope_Match); ok {
		return x.Match
	}
	return nil
}

func (x *Peer_Envelope) GetError() *rtapi.Error {
	if x, ok := x.GetPayload().(*Peer_Envelope_Error); ok {
		return x.Error
	}
	return nil
}

func (x *Peer_Envelope) GetPing() string {
	if x, ok := x.GetPayload().(*Peer_Envelope_Ping); ok {
		return x.Ping
	}
	return ""
}

func (x *Peer_Envelope) GetPong() string {
	if x, ok := x.GetPayload().(*Peer_Envelope_Pong); ok {
		return x.Pong
	}
	return ""
}

func (x *Peer_Envelope) GetMatchSignalReply() string {
	if x, ok := x.GetPayload().(*Peer_Envelope_MatchSignalReply); ok {
		return x.MatchSignalReply
	}
	return ""
}

func (x *Peer_Envelope) GetMatchStateReply() *Match_State {
	if x, ok := x.GetPayload().(*Peer_Envelope_MatchStateReply); ok {
		return x.MatchStateReply
	}
	return nil
}

func (x *Peer_Envelope) GetNkEnvelope() *rtapi.Envelope {
	if x, ok := x.GetPayload().(*Peer_Envelope_NkEnvelope); ok {
		return x.NkEnvelope
	}
	return nil
}

type isPeer_Envelope_Payload interface {
	isPeer_Envelope_Payload()
}

type Peer_Envelope_SingleSocket struct {
	SingleSocket string `protobuf:"bytes,4,opt,name=singleSocket,proto3,oneof"`
}

type Peer_Envelope_Disconnect struct {
	Disconnect *Disconnect `protobuf:"bytes,5,opt,name=disconnect,proto3,oneof"`
}

type Peer_Envelope_PartyJoinRequest struct {
	PartyJoinRequest *Party_JoinRequest `protobuf:"bytes,6,opt,name=partyJoinRequest,proto3,oneof"`
}

type Peer_Envelope_PartyJoinRequestReply struct {
	PartyJoinRequestReply bool `protobuf:"varint,7,opt,name=partyJoinRequestReply,proto3,oneof"`
}

type Peer_Envelope_PartyPromote struct {
	PartyPromote *Party_Promote `protobuf:"bytes,8,opt,name=partyPromote,proto3,oneof"`
}

type Peer_Envelope_PartyAccept struct {
	PartyAccept *Party_Accept `protobuf:"bytes,9,opt,name=partyAccept,proto3,oneof"`
}

type Peer_Envelope_PartyRemove struct {
	PartyRemove *Party_Remove `protobuf:"bytes,10,opt,name=partyRemove,proto3,oneof"`
}

type Peer_Envelope_PartyClose struct {
	PartyClose *Party_Close `protobuf:"bytes,11,opt,name=partyClose,proto3,oneof"`
}

type Peer_Envelope_PartyJoinRequestList struct {
	PartyJoinRequestList *Party_JoinRequestList `protobuf:"bytes,12,opt,name=partyJoinRequestList,proto3,oneof"`
}

type Peer_Envelope_PartyJoinRequestListReply struct {
	PartyJoinRequestListReply *Party_JoinRequestListReply `protobuf:"bytes,13,opt,name=partyJoinRequestListReply,proto3,oneof"`
}

type Peer_Envelope_PartyMatchmakerAdd struct {
	PartyMatchmakerAdd *Party_MatchmakerAdd `protobuf:"bytes,14,opt,name=partyMatchmakerAdd,proto3,oneof"`
}

type Peer_Envelope_PartyMatchmakerAddReply struct {
	PartyMatchmakerAddReply *Party_MatchmakerAddReply `protobuf:"bytes,15,opt,name=PartyMatchmakerAddReply,proto3,oneof"`
}

type Peer_Envelope_PartyMatchmakerRemove struct {
	PartyMatchmakerRemove *Party_MatchmakerRemove `protobuf:"bytes,16,opt,name=partyMatchmakerRemove,proto3,oneof"`
}

type Peer_Envelope_PartyDataSend struct {
	PartyDataSend *Party_DataSend `protobuf:"bytes,17,opt,name=partyDataSend,proto3,oneof"`
}

type Peer_Envelope_MatchId struct {
	MatchId string `protobuf:"bytes,18,opt,name=matchId,proto3,oneof"`
}

type Peer_Envelope_MatchJoinAttempt struct {
	MatchJoinAttempt *Match_JoinAttempt `protobuf:"bytes,19,opt,name=matchJoinAttempt,proto3,oneof"`
}

type Peer_Envelope_MathJoinAttemptReply struct {
	MathJoinAttemptReply *Match_JoinAttemptReply `protobuf:"bytes,20,opt,name=mathJoinAttemptReply,proto3,oneof"`
}

type Peer_Envelope_MatchSendData struct {
	MatchSendData *Match_SendData `protobuf:"bytes,21,opt,name=matchSendData,proto3,oneof"`
}

type Peer_Envelope_MatchSignal struct {
	MatchSignal *Match_Signal `protobuf:"bytes,22,opt,name=matchSignal,proto3,oneof"`
}

type Peer_Envelope_MatchState struct {
	MatchState string `protobuf:"bytes,23,opt,name=matchState,proto3,oneof"`
}

type Peer_Envelope_Match struct {
	Match *api.Match `protobuf:"bytes,24,opt,name=match,proto3,oneof"`
}

type Peer_Envelope_Error struct {
	Error *rtapi.Error `protobuf:"bytes,25,opt,name=error,proto3,oneof"`
}

type Peer_Envelope_Ping struct {
	Ping string `protobuf:"bytes,26,opt,name=ping,proto3,oneof"`
}

type Peer_Envelope_Pong struct {
	Pong string `protobuf:"bytes,27,opt,name=pong,proto3,oneof"`
}

type Peer_Envelope_MatchSignalReply struct {
	MatchSignalReply string `protobuf:"bytes,28,opt,name=matchSignalReply,proto3,oneof"`
}

type Peer_Envelope_MatchStateReply struct {
	MatchStateReply *Match_State `protobuf:"bytes,29,opt,name=matchStateReply,proto3,oneof"`
}

type Peer_Envelope_NkEnvelope struct {
	NkEnvelope *rtapi.Envelope `protobuf:"bytes,30,opt,name=nkEnvelope,proto3,oneof"`
}

func (*Peer_Envelope_SingleSocket) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_Disconnect) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_PartyJoinRequest) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_PartyJoinRequestReply) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_PartyPromote) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_PartyAccept) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_PartyRemove) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_PartyClose) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_PartyJoinRequestList) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_PartyJoinRequestListReply) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_PartyMatchmakerAdd) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_PartyMatchmakerAddReply) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_PartyMatchmakerRemove) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_PartyDataSend) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_MatchId) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_MatchJoinAttempt) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_MathJoinAttemptReply) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_MatchSendData) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_MatchSignal) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_MatchState) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_Match) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_Error) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_Ping) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_Pong) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_MatchSignalReply) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_MatchStateReply) isPeer_Envelope_Payload() {}

func (*Peer_Envelope_NkEnvelope) isPeer_Envelope_Payload() {}

type BinaryLog_PartyMatchmakerRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket []string `protobuf:"bytes,1,rep,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *BinaryLog_PartyMatchmakerRemove) Reset() {
	*x = BinaryLog_PartyMatchmakerRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryLog_PartyMatchmakerRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryLog_PartyMatchmakerRemove) ProtoMessage() {}

func (x *BinaryLog_PartyMatchmakerRemove) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryLog_PartyMatchmakerRemove.ProtoReflect.Descriptor instead.
func (*BinaryLog_PartyMatchmakerRemove) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{15, 0}
}

func (x *BinaryLog_PartyMatchmakerRemove) GetTicket() []string {
	if x != nil {
		return x.Ticket
	}
	return nil
}

type Party_JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Presence *Presence `protobuf:"bytes,2,opt,name=presence,proto3" json:"presence,omitempty"`
}

func (x *Party_JoinRequest) Reset() {
	*x = Party_JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_JoinRequest) ProtoMessage() {}

func (x *Party_JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_JoinRequest.ProtoReflect.Descriptor instead.
func (*Party_JoinRequest) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{21, 0}
}

func (x *Party_JoinRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Party_JoinRequest) GetPresence() *Presence {
	if x != nil {
		return x.Presence
	}
	return nil
}

type Party_Promote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SessionID    string              `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	FromNode     string              `protobuf:"bytes,3,opt,name=fromNode,proto3" json:"fromNode,omitempty"`
	UserPresence *rtapi.UserPresence `protobuf:"bytes,4,opt,name=userPresence,proto3" json:"userPresence,omitempty"`
}

func (x *Party_Promote) Reset() {
	*x = Party_Promote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_Promote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_Promote) ProtoMessage() {}

func (x *Party_Promote) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_Promote.ProtoReflect.Descriptor instead.
func (*Party_Promote) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{21, 1}
}

func (x *Party_Promote) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Party_Promote) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Party_Promote) GetFromNode() string {
	if x != nil {
		return x.FromNode
	}
	return ""
}

func (x *Party_Promote) GetUserPresence() *rtapi.UserPresence {
	if x != nil {
		return x.UserPresence
	}
	return nil
}

type Party_Accept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SessionID    string              `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	FromNode     string              `protobuf:"bytes,3,opt,name=fromNode,proto3" json:"fromNode,omitempty"`
	UserPresence *rtapi.UserPresence `protobuf:"bytes,4,opt,name=userPresence,proto3" json:"userPresence,omitempty"`
}

func (x *Party_Accept) Reset() {
	*x = Party_Accept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_Accept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_Accept) ProtoMessage() {}

func (x *Party_Accept) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_Accept.ProtoReflect.Descriptor instead.
func (*Party_Accept) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{21, 2}
}

func (x *Party_Accept) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Party_Accept) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Party_Accept) GetFromNode() string {
	if x != nil {
		return x.FromNode
	}
	return ""
}

func (x *Party_Accept) GetUserPresence() *rtapi.UserPresence {
	if x != nil {
		return x.UserPresence
	}
	return nil
}

type Party_Remove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SessionID    string              `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	FromNode     string              `protobuf:"bytes,3,opt,name=fromNode,proto3" json:"fromNode,omitempty"`
	UserPresence *rtapi.UserPresence `protobuf:"bytes,4,opt,name=userPresence,proto3" json:"userPresence,omitempty"`
}

func (x *Party_Remove) Reset() {
	*x = Party_Remove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_Remove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_Remove) ProtoMessage() {}

func (x *Party_Remove) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_Remove.ProtoReflect.Descriptor instead.
func (*Party_Remove) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{21, 3}
}

func (x *Party_Remove) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Party_Remove) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Party_Remove) GetFromNode() string {
	if x != nil {
		return x.FromNode
	}
	return ""
}

func (x *Party_Remove) GetUserPresence() *rtapi.UserPresence {
	if x != nil {
		return x.UserPresence
	}
	return nil
}

type Party_Close struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SessionID string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	FromNode  string `protobuf:"bytes,3,opt,name=fromNode,proto3" json:"fromNode,omitempty"`
}

func (x *Party_Close) Reset() {
	*x = Party_Close{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_Close) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_Close) ProtoMessage() {}

func (x *Party_Close) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_Close.ProtoReflect.Descriptor instead.
func (*Party_Close) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{21, 4}
}

func (x *Party_Close) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Party_Close) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Party_Close) GetFromNode() string {
	if x != nil {
		return x.FromNode
	}
	return ""
}

type Party_JoinRequestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SessionID string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	FromNode  string `protobuf:"bytes,3,opt,name=fromNode,proto3" json:"fromNode,omitempty"`
}

func (x *Party_JoinRequestList) Reset() {
	*x = Party_JoinRequestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_JoinRequestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_JoinRequestList) ProtoMessage() {}

func (x *Party_JoinRequestList) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_JoinRequestList.ProtoReflect.Descriptor instead.
func (*Party_JoinRequestList) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{21, 5}
}

func (x *Party_JoinRequestList) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Party_JoinRequestList) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Party_JoinRequestList) GetFromNode() string {
	if x != nil {
		return x.FromNode
	}
	return ""
}

type Party_JoinRequestListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPresence []*rtapi.UserPresence `protobuf:"bytes,1,rep,name=userPresence,proto3" json:"userPresence,omitempty"`
}

func (x *Party_JoinRequestListReply) Reset() {
	*x = Party_JoinRequestListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_JoinRequestListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_JoinRequestListReply) ProtoMessage() {}

func (x *Party_JoinRequestListReply) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_JoinRequestListReply.ProtoReflect.Descriptor instead.
func (*Party_JoinRequestListReply) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{21, 6}
}

func (x *Party_JoinRequestListReply) GetUserPresence() []*rtapi.UserPresence {
	if x != nil {
		return x.UserPresence
	}
	return nil
}

type Party_MatchmakerAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SessionID         string             `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	FromNode          string             `protobuf:"bytes,3,opt,name=fromNode,proto3" json:"fromNode,omitempty"`
	Query             string             `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	MinCount          int32              `protobuf:"varint,5,opt,name=minCount,proto3" json:"minCount,omitempty"`
	MaxCount          int32              `protobuf:"varint,6,opt,name=maxCount,proto3" json:"maxCount,omitempty"`
	CountMultiple     int32              `protobuf:"varint,7,opt,name=countMultiple,proto3" json:"countMultiple,omitempty"`
	StringProperties  map[string]string  `protobuf:"bytes,8,rep,name=stringProperties,proto3" json:"stringProperties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NumericProperties map[string]float64 `protobuf:"bytes,9,rep,name=numericProperties,proto3" json:"numericProperties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *Party_MatchmakerAdd) Reset() {
	*x = Party_MatchmakerAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_MatchmakerAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_MatchmakerAdd) ProtoMessage() {}

func (x *Party_MatchmakerAdd) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_MatchmakerAdd.ProtoReflect.Descriptor instead.
func (*Party_MatchmakerAdd) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{21, 7}
}

func (x *Party_MatchmakerAdd) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Party_MatchmakerAdd) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Party_MatchmakerAdd) GetFromNode() string {
	if x != nil {
		return x.FromNode
	}
	return ""
}

func (x *Party_MatchmakerAdd) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Party_MatchmakerAdd) GetMinCount() int32 {
	if x != nil {
		return x.MinCount
	}
	return 0
}

func (x *Party_MatchmakerAdd) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *Party_MatchmakerAdd) GetCountMultiple() int32 {
	if x != nil {
		return x.CountMultiple
	}
	return 0
}

func (x *Party_MatchmakerAdd) GetStringProperties() map[string]string {
	if x != nil {
		return x.StringProperties
	}
	return nil
}

func (x *Party_MatchmakerAdd) GetNumericProperties() map[string]float64 {
	if x != nil {
		return x.NumericProperties
	}
	return nil
}

type Party_MatchmakerAddReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket     string        `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	PresenceID []*PresenceID `protobuf:"bytes,2,rep,name=presenceID,proto3" json:"presenceID,omitempty"`
}

func (x *Party_MatchmakerAddReply) Reset() {
	*x = Party_MatchmakerAddReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_MatchmakerAddReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_MatchmakerAddReply) ProtoMessage() {}

func (x *Party_MatchmakerAddReply) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_MatchmakerAddReply.ProtoReflect.Descriptor instead.
func (*Party_MatchmakerAddReply) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{21, 8}
}

func (x *Party_MatchmakerAddReply) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *Party_MatchmakerAddReply) GetPresenceID() []*PresenceID {
	if x != nil {
		return x.PresenceID
	}
	return nil
}

type Party_MatchmakerRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SessionID string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	FromNode  string `protobuf:"bytes,3,opt,name=fromNode,proto3" json:"fromNode,omitempty"`
	Ticket    string `protobuf:"bytes,4,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *Party_MatchmakerRemove) Reset() {
	*x = Party_MatchmakerRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_MatchmakerRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_MatchmakerRemove) ProtoMessage() {}

func (x *Party_MatchmakerRemove) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_MatchmakerRemove.ProtoReflect.Descriptor instead.
func (*Party_MatchmakerRemove) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{21, 9}
}

func (x *Party_MatchmakerRemove) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Party_MatchmakerRemove) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Party_MatchmakerRemove) GetFromNode() string {
	if x != nil {
		return x.FromNode
	}
	return ""
}

func (x *Party_MatchmakerRemove) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

type Party_DataSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SessionID string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	FromNode  string `protobuf:"bytes,3,opt,name=fromNode,proto3" json:"fromNode,omitempty"`
	OpCode    int64  `protobuf:"varint,4,opt,name=opCode,proto3" json:"opCode,omitempty"`
	Data      []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Party_DataSend) Reset() {
	*x = Party_DataSend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party_DataSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party_DataSend) ProtoMessage() {}

func (x *Party_DataSend) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party_DataSend.ProtoReflect.Descriptor instead.
func (*Party_DataSend) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{21, 10}
}

func (x *Party_DataSend) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Party_DataSend) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Party_DataSend) GetFromNode() string {
	if x != nil {
		return x.FromNode
	}
	return ""
}

func (x *Party_DataSend) GetOpCode() int64 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *Party_DataSend) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Match_JoinAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string            `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	SessionId     string            `protobuf:"bytes,3,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Username      string            `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	SessionExpiry int64             `protobuf:"varint,5,opt,name=sessionExpiry,proto3" json:"sessionExpiry,omitempty"`
	Vars          map[string]string `protobuf:"bytes,6,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClientIP      string            `protobuf:"bytes,7,opt,name=clientIP,proto3" json:"clientIP,omitempty"`
	ClientPort    string            `protobuf:"bytes,8,opt,name=clientPort,proto3" json:"clientPort,omitempty"`
	FromNode      string            `protobuf:"bytes,9,opt,name=fromNode,proto3" json:"fromNode,omitempty"`
	Metadata      map[string]string `protobuf:"bytes,20,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Match_JoinAttempt) Reset() {
	*x = Match_JoinAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match_JoinAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match_JoinAttempt) ProtoMessage() {}

func (x *Match_JoinAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match_JoinAttempt.ProtoReflect.Descriptor instead.
func (*Match_JoinAttempt) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{22, 0}
}

func (x *Match_JoinAttempt) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Match_JoinAttempt) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Match_JoinAttempt) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Match_JoinAttempt) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Match_JoinAttempt) GetSessionExpiry() int64 {
	if x != nil {
		return x.SessionExpiry
	}
	return 0
}

func (x *Match_JoinAttempt) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *Match_JoinAttempt) GetClientIP() string {
	if x != nil {
		return x.ClientIP
	}
	return ""
}

func (x *Match_JoinAttempt) GetClientPort() string {
	if x != nil {
		return x.ClientPort
	}
	return ""
}

func (x *Match_JoinAttempt) GetFromNode() string {
	if x != nil {
		return x.FromNode
	}
	return ""
}

func (x *Match_JoinAttempt) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Match_JoinAttemptReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Found     bool             `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	Allow     bool             `protobuf:"varint,2,opt,name=allow,proto3" json:"allow,omitempty"`
	IsNew     bool             `protobuf:"varint,3,opt,name=isNew,proto3" json:"isNew,omitempty"`
	Reason    string           `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Label     string           `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	Presences []*MatchPresence `protobuf:"bytes,6,rep,name=presences,proto3" json:"presences,omitempty"`
}

func (x *Match_JoinAttemptReply) Reset() {
	*x = Match_JoinAttemptReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match_JoinAttemptReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match_JoinAttemptReply) ProtoMessage() {}

func (x *Match_JoinAttemptReply) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match_JoinAttemptReply.ProtoReflect.Descriptor instead.
func (*Match_JoinAttemptReply) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{22, 1}
}

func (x *Match_JoinAttemptReply) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *Match_JoinAttemptReply) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

func (x *Match_JoinAttemptReply) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *Match_JoinAttemptReply) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Match_JoinAttemptReply) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Match_JoinAttemptReply) GetPresences() []*MatchPresence {
	if x != nil {
		return x.Presences
	}
	return nil
}

type Match_SendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	SessionId   string `protobuf:"bytes,3,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Username    string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	FromNode    string `protobuf:"bytes,5,opt,name=fromNode,proto3" json:"fromNode,omitempty"`
	OpCode      int64  `protobuf:"varint,6,opt,name=opCode,proto3" json:"opCode,omitempty"`
	Data        []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Reliable    bool   `protobuf:"varint,8,opt,name=reliable,proto3" json:"reliable,omitempty"`
	ReceiveTime int64  `protobuf:"varint,9,opt,name=receiveTime,proto3" json:"receiveTime,omitempty"`
}

func (x *Match_SendData) Reset() {
	*x = Match_SendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match_SendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match_SendData) ProtoMessage() {}

func (x *Match_SendData) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match_SendData.ProtoReflect.Descriptor instead.
func (*Match_SendData) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{22, 2}
}

func (x *Match_SendData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Match_SendData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Match_SendData) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Match_SendData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Match_SendData) GetFromNode() string {
	if x != nil {
		return x.FromNode
	}
	return ""
}

func (x *Match_SendData) GetOpCode() int64 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *Match_SendData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Match_SendData) GetReliable() bool {
	if x != nil {
		return x.Reliable
	}
	return false
}

func (x *Match_SendData) GetReceiveTime() int64 {
	if x != nil {
		return x.ReceiveTime
	}
	return 0
}

type Match_Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Match_Signal) Reset() {
	*x = Match_Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match_Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match_Signal) ProtoMessage() {}

func (x *Match_Signal) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match_Signal.ProtoReflect.Descriptor instead.
func (*Match_Signal) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{22, 3}
}

func (x *Match_Signal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Match_Signal) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Match_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPresence []*rtapi.UserPresence `protobuf:"bytes,1,rep,name=userPresence,proto3" json:"userPresence,omitempty"`
	Tick         int64                 `protobuf:"varint,2,opt,name=tick,proto3" json:"tick,omitempty"`
	State        string                `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Match_State) Reset() {
	*x = Match_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match_State) ProtoMessage() {}

func (x *Match_State) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match_State.ProtoReflect.Descriptor instead.
func (*Match_State) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{22, 4}
}

func (x *Match_State) GetUserPresence() []*rtapi.UserPresence {
	if x != nil {
		return x.UserPresence
	}
	return nil
}

func (x *Match_State) GetTick() int64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *Match_State) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

var File_peer_proto protoreflect.FileDescriptor

var file_peer_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x5f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x72, 0x74,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd2, 0x17, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x1a, 0x1d, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x8f, 0x04, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0c, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x51, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x95, 0x04, 0x0a,
	0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0c,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x80, 0x0f, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12,
	0x4c, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x15, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x15,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x19, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x19, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x61, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x48, 0x00, 0x52, 0x17, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x15, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x10, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x59, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x68, 0x4a,
	0x6f, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x61,
	0x74, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x12,
	0x2c, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a,
	0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x6e, 0x6b, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67,
	0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x6b, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x3a, 0x0a,
	0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x53, 0x45, 0x52, 0x49, 0x44, 0x10, 0x03, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd7, 0x02, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x09,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x4c, 0x6f, 0x67, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x54,
	0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0xae, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x3e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x22, 0xd0, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x6f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x67,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x76, 0x67, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x76, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4b, 0x62, 0x73, 0x22, 0x3e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x74,
	0x0a, 0x0e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0xba, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0xed, 0x03, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a,
	0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52,
	0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x1a, 0x37, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41,
	0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x22, 0x34, 0x0a, 0x08, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f,
	0x4d, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x52, 0x4f, 0x42, 0x49,
	0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x41, 0x53, 0x48, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x22, 0x22, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x3c, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xad,
	0x07, 0x0a, 0x09, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x07, 0x75, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x12, 0x29, 0x0a, 0x03, 0x62, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x62, 0x61, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x5a,
	0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x1a, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x1a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x15,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x15, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x6c, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41,
	0x6c, 0x6c, 0x12, 0x52, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x5a, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x1a, 0x2f, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x76,
	0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x4c, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7a, 0x0a,
	0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xce, 0x05, 0x0a, 0x11, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x3d, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x10, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x11,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x1a,
	0x43, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb3, 0x0d, 0x0a, 0x05, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x1a, 0x50, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x96, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x1a,
	0x95, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x95, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x1a,
	0x51, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x1a, 0x5b, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x1a,
	0x59, 0x0a, 0x14, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0xa3, 0x04, 0x0a, 0x0d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x10, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x65,
	0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x2e, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x65, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x37,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x1a, 0x74, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f,
	0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f,
	0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x80, 0x01,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xcd, 0x08, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0xeb, 0x03, 0x0a, 0x0b, 0x4a,
	0x6f, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x2e, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xbc, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x69,
	0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e,
	0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x38, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0xf2, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x2c, 0x0a, 0x06,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x74, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x67, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x32, 0x99, 0x01, 0x0a, 0x07, 0x50, 0x65, 0x65, 0x72, 0x41, 0x70, 0x69, 0x12, 0x43, 0x0a, 0x04,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x2e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x67, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x28, 0x01, 0x30, 0x01, 0x42, 0x5a, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x32, 0x75, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x67, 0x2e, 0x70, 0x62, 0x42, 0x0a, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x50, 0x65, 0x65,
	0x72, 0x50, 0x01, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x75, 0x32, 0x75, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x2d,
	0x6b, 0x69, 0x74, 0x2f, 0x70, 0x62, 0xaa, 0x02, 0x0f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_peer_proto_rawDescOnce sync.Once
	file_peer_proto_rawDescData = file_peer_proto_rawDesc
)

func file_peer_proto_rawDescGZIP() []byte {
	file_peer_proto_rawDescOnce.Do(func() {
		file_peer_proto_rawDescData = protoimpl.X.CompressGZIP(file_peer_proto_rawDescData)
	})
	return file_peer_proto_rawDescData
}

var file_peer_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_peer_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_peer_proto_goTypes = []any{
	(Recipienter_Role)(0),                   // 0: layerg.peer.Recipienter.Role
	(NodeMeta_Status)(0),                    // 1: layerg.peer.NodeMeta.Status
	(NodeMeta_Balancer)(0),                  // 2: layerg.peer.NodeMeta.Balancer
	(*Peer)(nil),                            // 3: layerg.peer.Peer
	(*Recipienter)(nil),                     // 4: layerg.peer.Recipienter
	(*Frame)(nil),                           // 5: layerg.peer.Frame
	(*Disconnect)(nil),                      // 6: layerg.peer.Disconnect
	(*State)(nil),                           // 7: layerg.peer.State
	(*StateNode)(nil),                       // 8: layerg.peer.StateNode
	(*Status)(nil),                          // 9: layerg.peer.Status
	(*PresenceID)(nil),                      // 10: layerg.peer.PresenceID
	(*Presence)(nil),                        // 11: layerg.peer.Presence
	(*PresenceStream)(nil),                  // 12: layerg.peer.PresenceStream
	(*PresenceMeta)(nil),                    // 13: layerg.peer.PresenceMeta
	(*NodeMeta)(nil),                        // 14: layerg.peer.NodeMeta
	(*BanValue)(nil),                        // 15: layerg.peer.BanValue
	(*UntrackValue)(nil),                    // 16: layerg.peer.UntrackValue
	(*MatchBatch)(nil),                      // 17: layerg.peer.MatchBatch
	(*BinaryLog)(nil),                       // 18: layerg.peer.BinaryLog
	(*Point)(nil),                           // 19: layerg.peer.Point
	(*CheckPoint)(nil),                      // 20: layerg.peer.CheckPoint
	(*MatchmakerPresence)(nil),              // 21: layerg.peer.MatchmakerPresence
	(*MatchmakerExtract)(nil),               // 22: layerg.peer.MatchmakerExtract
	(*MatchPresence)(nil),                   // 23: layerg.peer.MatchPresence
	(*Party)(nil),                           // 24: layerg.peer.Party
	(*Match)(nil),                           // 25: layerg.peer.Match
	(*Peer_Query)(nil),                      // 26: layerg.peer.Peer.Query
	(*Peer_Request)(nil),                    // 27: layerg.peer.Peer.Request
	(*Peer_ResponseWriter)(nil),             // 28: layerg.peer.Peer.ResponseWriter
	(*Peer_Envelope)(nil),                   // 29: layerg.peer.Peer.Envelope
	nil,                                     // 30: layerg.peer.Peer.Request.HeaderEntry
	nil,                                     // 31: layerg.peer.Peer.Request.QueryEntry
	nil,                                     // 32: layerg.peer.Peer.Request.ContextEntry
	nil,                                     // 33: layerg.peer.Peer.ResponseWriter.HeaderEntry
	nil,                                     // 34: layerg.peer.Peer.ResponseWriter.ContextEntry
	nil,                                     // 35: layerg.peer.Peer.Envelope.ContextEntry
	nil,                                     // 36: layerg.peer.NodeMeta.VarsEntry
	(*BinaryLog_PartyMatchmakerRemove)(nil), // 37: layerg.peer.BinaryLog.PartyMatchmakerRemove
	nil,                                     // 38: layerg.peer.Point.PointEntry
	nil,                                     // 39: layerg.peer.CheckPoint.ValueEntry
	nil,                                     // 40: layerg.peer.MatchmakerExtract.StringPropertiesEntry
	nil,                                     // 41: layerg.peer.MatchmakerExtract.NumericPropertiesEntry
	(*Party_JoinRequest)(nil),               // 42: layerg.peer.Party.JoinRequest
	(*Party_Promote)(nil),                   // 43: layerg.peer.Party.Promote
	(*Party_Accept)(nil),                    // 44: layerg.peer.Party.Accept
	(*Party_Remove)(nil),                    // 45: layerg.peer.Party.Remove
	(*Party_Close)(nil),                     // 46: layerg.peer.Party.Close
	(*Party_JoinRequestList)(nil),           // 47: layerg.peer.Party.JoinRequestList
	(*Party_JoinRequestListReply)(nil),      // 48: layerg.peer.Party.JoinRequestListReply
	(*Party_MatchmakerAdd)(nil),             // 49: layerg.peer.Party.MatchmakerAdd
	(*Party_MatchmakerAddReply)(nil),        // 50: layerg.peer.Party.MatchmakerAddReply
	(*Party_MatchmakerRemove)(nil),          // 51: layerg.peer.Party.MatchmakerRemove
	(*Party_DataSend)(nil),                  // 52: layerg.peer.Party.DataSend
	nil,                                     // 53: layerg.peer.Party.MatchmakerAdd.StringPropertiesEntry
	nil,                                     // 54: layerg.peer.Party.MatchmakerAdd.NumericPropertiesEntry
	(*Match_JoinAttempt)(nil),               // 55: layerg.peer.Match.JoinAttempt
	(*Match_JoinAttemptReply)(nil),          // 56: layerg.peer.Match.JoinAttemptReply
	(*Match_SendData)(nil),                  // 57: layerg.peer.Match.SendData
	(*Match_Signal)(nil),                    // 58: layerg.peer.Match.Signal
	(*Match_State)(nil),                     // 59: layerg.peer.Match.State
	nil,                                     // 60: layerg.peer.Match.JoinAttempt.VarsEntry
	nil,                                     // 61: layerg.peer.Match.JoinAttempt.MetadataEntry
	(*timestamppb.Timestamp)(nil),           // 62: google.protobuf.Timestamp
	(*api.AnyRequest)(nil),                  // 63: layerg.api.AnyRequest
	(*rtapi.Notifications)(nil),             // 64: layerg.realtime.Notifications
	(*api.Match)(nil),                       // 65: layerg.api.Match
	(*rtapi.Error)(nil),                     // 66: layerg.realtime.Error
	(*rtapi.Envelope)(nil),                  // 67: layerg.realtime.Envelope
	(*rtapi.UserPresence)(nil),              // 68: layerg.realtime.UserPresence
}
var file_peer_proto_depIdxs = []int32{
	0,  // 0: layerg.peer.Recipienter.action:type_name -> layerg.peer.Recipienter.Role
	12, // 1: layerg.peer.Recipienter.stream:type_name -> layerg.peer.PresenceStream
	62, // 2: layerg.peer.Frame.timestamp:type_name -> google.protobuf.Timestamp
	29, // 3: layerg.peer.Frame.envelope:type_name -> layerg.peer.Peer.Envelope
	18, // 4: layerg.peer.Frame.binaryLog:type_name -> layerg.peer.BinaryLog
	9,  // 5: layerg.peer.Frame.status:type_name -> layerg.peer.Status
	63, // 6: layerg.peer.Frame.event:type_name -> layerg.api.AnyRequest
	8,  // 7: layerg.peer.State.nodes:type_name -> layerg.peer.StateNode
	11, // 8: layerg.peer.StateNode.Presences:type_name -> layerg.peer.Presence
	22, // 9: layerg.peer.StateNode.matchmaker:type_name -> layerg.peer.MatchmakerExtract
	12, // 10: layerg.peer.Presence.stream:type_name -> layerg.peer.PresenceStream
	13, // 11: layerg.peer.Presence.meta:type_name -> layerg.peer.PresenceMeta
	36, // 12: layerg.peer.NodeMeta.vars:type_name -> layerg.peer.NodeMeta.VarsEntry
	1,  // 13: layerg.peer.NodeMeta.status:type_name -> layerg.peer.NodeMeta.Status
	2,  // 14: layerg.peer.NodeMeta.balancer:type_name -> layerg.peer.NodeMeta.Balancer
	12, // 15: layerg.peer.UntrackValue.stream:type_name -> layerg.peer.PresenceStream
	12, // 16: layerg.peer.UntrackValue.skip:type_name -> layerg.peer.PresenceStream
	11, // 17: layerg.peer.BinaryLog.track:type_name -> layerg.peer.Presence
	16, // 18: layerg.peer.BinaryLog.untrack:type_name -> layerg.peer.UntrackValue
	15, // 19: layerg.peer.BinaryLog.ban:type_name -> layerg.peer.BanValue
	11, // 20: layerg.peer.BinaryLog.updateTrack:type_name -> layerg.peer.Presence
	22, // 21: layerg.peer.BinaryLog.MatchmakerAdd:type_name -> layerg.peer.MatchmakerExtract
	22, // 22: layerg.peer.BinaryLog.MatchmakerRemoveSession:type_name -> layerg.peer.MatchmakerExtract
	22, // 23: layerg.peer.BinaryLog.MatchmakerRemoveSessionAll:type_name -> layerg.peer.MatchmakerExtract
	22, // 24: layerg.peer.BinaryLog.MatchmakerRemoveParty:type_name -> layerg.peer.MatchmakerExtract
	22, // 25: layerg.peer.BinaryLog.MatchmakerRemovePartyAll:type_name -> layerg.peer.MatchmakerExtract
	22, // 26: layerg.peer.BinaryLog.MatchmakerRemoveAll:type_name -> layerg.peer.MatchmakerExtract
	37, // 27: layerg.peer.BinaryLog.MatchmakerRemove:type_name -> layerg.peer.BinaryLog.PartyMatchmakerRemove
	38, // 28: layerg.peer.Point.point:type_name -> layerg.peer.Point.PointEntry
	39, // 29: layerg.peer.CheckPoint.value:type_name -> layerg.peer.CheckPoint.ValueEntry
	21, // 30: layerg.peer.MatchmakerExtract.presences:type_name -> layerg.peer.MatchmakerPresence
	40, // 31: layerg.peer.MatchmakerExtract.stringProperties:type_name -> layerg.peer.MatchmakerExtract.StringPropertiesEntry
	41, // 32: layerg.peer.MatchmakerExtract.numericProperties:type_name -> layerg.peer.MatchmakerExtract.NumericPropertiesEntry
	30, // 33: layerg.peer.Peer.Request.header:type_name -> layerg.peer.Peer.Request.HeaderEntry
	31, // 34: layerg.peer.Peer.Request.query:type_name -> layerg.peer.Peer.Request.QueryEntry
	32, // 35: layerg.peer.Peer.Request.context:type_name -> layerg.peer.Peer.Request.ContextEntry
	33, // 36: layerg.peer.Peer.ResponseWriter.header:type_name -> layerg.peer.Peer.ResponseWriter.HeaderEntry
	34, // 37: layerg.peer.Peer.ResponseWriter.context:type_name -> layerg.peer.Peer.ResponseWriter.ContextEntry
	4,  // 38: layerg.peer.Peer.ResponseWriter.recipient:type_name -> layerg.peer.Recipienter
	64, // 39: layerg.peer.Peer.ResponseWriter.notifications:type_name -> layerg.realtime.Notifications
	35, // 40: layerg.peer.Peer.Envelope.context:type_name -> layerg.peer.Peer.Envelope.ContextEntry
	4,  // 41: layerg.peer.Peer.Envelope.recipient:type_name -> layerg.peer.Recipienter
	6,  // 42: layerg.peer.Peer.Envelope.disconnect:type_name -> layerg.peer.Disconnect
	42, // 43: layerg.peer.Peer.Envelope.partyJoinRequest:type_name -> layerg.peer.Party.JoinRequest
	43, // 44: layerg.peer.Peer.Envelope.partyPromote:type_name -> layerg.peer.Party.Promote
	44, // 45: layerg.peer.Peer.Envelope.partyAccept:type_name -> layerg.peer.Party.Accept
	45, // 46: layerg.peer.Peer.Envelope.partyRemove:type_name -> layerg.peer.Party.Remove
	46, // 47: layerg.peer.Peer.Envelope.partyClose:type_name -> layerg.peer.Party.Close
	47, // 48: layerg.peer.Peer.Envelope.partyJoinRequestList:type_name -> layerg.peer.Party.JoinRequestList
	48, // 49: layerg.peer.Peer.Envelope.partyJoinRequestListReply:type_name -> layerg.peer.Party.JoinRequestListReply
	49, // 50: layerg.peer.Peer.Envelope.partyMatchmakerAdd:type_name -> layerg.peer.Party.MatchmakerAdd
	50, // 51: layerg.peer.Peer.Envelope.PartyMatchmakerAddReply:type_name -> layerg.peer.Party.MatchmakerAddReply
	51, // 52: layerg.peer.Peer.Envelope.partyMatchmakerRemove:type_name -> layerg.peer.Party.MatchmakerRemove
	52, // 53: layerg.peer.Peer.Envelope.partyDataSend:type_name -> layerg.peer.Party.DataSend
	55, // 54: layerg.peer.Peer.Envelope.matchJoinAttempt:type_name -> layerg.peer.Match.JoinAttempt
	56, // 55: layerg.peer.Peer.Envelope.mathJoinAttemptReply:type_name -> layerg.peer.Match.JoinAttemptReply
	57, // 56: layerg.peer.Peer.Envelope.matchSendData:type_name -> layerg.peer.Match.SendData
	58, // 57: layerg.peer.Peer.Envelope.matchSignal:type_name -> layerg.peer.Match.Signal
	65, // 58: layerg.peer.Peer.Envelope.match:type_name -> layerg.api.Match
	66, // 59: layerg.peer.Peer.Envelope.error:type_name -> layerg.realtime.Error
	59, // 60: layerg.peer.Peer.Envelope.matchStateReply:type_name -> layerg.peer.Match.State
	67, // 61: layerg.peer.Peer.Envelope.nkEnvelope:type_name -> layerg.realtime.Envelope
	26, // 62: layerg.peer.Peer.Request.QueryEntry.value:type_name -> layerg.peer.Peer.Query
	19, // 63: layerg.peer.CheckPoint.ValueEntry.value:type_name -> layerg.peer.Point
	11, // 64: layerg.peer.Party.JoinRequest.presence:type_name -> layerg.peer.Presence
	68, // 65: layerg.peer.Party.Promote.userPresence:type_name -> layerg.realtime.UserPresence
	68, // 66: layerg.peer.Party.Accept.userPresence:type_name -> layerg.realtime.UserPresence
	68, // 67: layerg.peer.Party.Remove.userPresence:type_name -> layerg.realtime.UserPresence
	68, // 68: layerg.peer.Party.JoinRequestListReply.userPresence:type_name -> layerg.realtime.UserPresence
	53, // 69: layerg.peer.Party.MatchmakerAdd.stringProperties:type_name -> layerg.peer.Party.MatchmakerAdd.StringPropertiesEntry
	54, // 70: layerg.peer.Party.MatchmakerAdd.numericProperties:type_name -> layerg.peer.Party.MatchmakerAdd.NumericPropertiesEntry
	10, // 71: layerg.peer.Party.MatchmakerAddReply.presenceID:type_name -> layerg.peer.PresenceID
	60, // 72: layerg.peer.Match.JoinAttempt.vars:type_name -> layerg.peer.Match.JoinAttempt.VarsEntry
	61, // 73: layerg.peer.Match.JoinAttempt.metadata:type_name -> layerg.peer.Match.JoinAttempt.MetadataEntry
	23, // 74: layerg.peer.Match.JoinAttemptReply.presences:type_name -> layerg.peer.MatchPresence
	68, // 75: layerg.peer.Match.State.userPresence:type_name -> layerg.realtime.UserPresence
	27, // 76: layerg.peer.PeerApi.Call:input_type -> layerg.peer.Peer.Request
	27, // 77: layerg.peer.PeerApi.Stream:input_type -> layerg.peer.Peer.Request
	28, // 78: layerg.peer.PeerApi.Call:output_type -> layerg.peer.Peer.ResponseWriter
	28, // 79: layerg.peer.PeerApi.Stream:output_type -> layerg.peer.Peer.ResponseWriter
	78, // [78:80] is the sub-list for method output_type
	76, // [76:78] is the sub-list for method input_type
	76, // [76:76] is the sub-list for extension type_name
	76, // [76:76] is the sub-list for extension extendee
	0,  // [0:76] is the sub-list for field type_name
}

func init() { file_peer_proto_init() }
func file_peer_proto_init() {
	if File_peer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_peer_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Recipienter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Disconnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*StateNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PresenceID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Presence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PresenceStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PresenceMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*NodeMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*BanValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*UntrackValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MatchBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*BinaryLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CheckPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MatchmakerPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*MatchmakerExtract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*MatchPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*Peer_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*Peer_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Peer_ResponseWriter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*Peer_Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*BinaryLog_PartyMatchmakerRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*Party_JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*Party_Promote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*Party_Accept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*Party_Remove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*Party_Close); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*Party_JoinRequestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*Party_JoinRequestListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*Party_MatchmakerAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*Party_MatchmakerAddReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*Party_MatchmakerRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*Party_DataSend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*Match_JoinAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*Match_JoinAttemptReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*Match_SendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*Match_Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*Match_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_peer_proto_msgTypes[1].OneofWrappers = []any{
		(*Recipienter_Token)(nil),
		(*Recipienter_Stream)(nil),
	}
	file_peer_proto_msgTypes[2].OneofWrappers = []any{
		(*Frame_Envelope)(nil),
		(*Frame_BinaryLog)(nil),
		(*Frame_Status)(nil),
		(*Frame_Event)(nil),
	}
	file_peer_proto_msgTypes[15].OneofWrappers = []any{
		(*BinaryLog_Track)(nil),
		(*BinaryLog_Untrack)(nil),
		(*BinaryLog_Ban)(nil),
		(*BinaryLog_UpdateTrack)(nil),
		(*BinaryLog_MatchmakerAdd)(nil),
		(*BinaryLog_MatchmakerRemoveSession)(nil),
		(*BinaryLog_MatchmakerRemoveSessionAll)(nil),
		(*BinaryLog_MatchmakerRemoveParty)(nil),
		(*BinaryLog_MatchmakerRemovePartyAll)(nil),
		(*BinaryLog_MatchmakerRemoveAll)(nil),
		(*BinaryLog_MatchmakerRemove)(nil),
	}
	file_peer_proto_msgTypes[24].OneofWrappers = []any{
		(*Peer_Request_BytesContent)(nil),
		(*Peer_Request_StringContent)(nil),
	}
	file_peer_proto_msgTypes[25].OneofWrappers = []any{
		(*Peer_ResponseWriter_BytesContent)(nil),
		(*Peer_ResponseWriter_StringContent)(nil),
		(*Peer_ResponseWriter_Notifications)(nil),
	}
	file_peer_proto_msgTypes[26].OneofWrappers = []any{
		(*Peer_Envelope_SingleSocket)(nil),
		(*Peer_Envelope_Disconnect)(nil),
		(*Peer_Envelope_PartyJoinRequest)(nil),
		(*Peer_Envelope_PartyJoinRequestReply)(nil),
		(*Peer_Envelope_PartyPromote)(nil),
		(*Peer_Envelope_PartyAccept)(nil),
		(*Peer_Envelope_PartyRemove)(nil),
		(*Peer_Envelope_PartyClose)(nil),
		(*Peer_Envelope_PartyJoinRequestList)(nil),
		(*Peer_Envelope_PartyJoinRequestListReply)(nil),
		(*Peer_Envelope_PartyMatchmakerAdd)(nil),
		(*Peer_Envelope_PartyMatchmakerAddReply)(nil),
		(*Peer_Envelope_PartyMatchmakerRemove)(nil),
		(*Peer_Envelope_PartyDataSend)(nil),
		(*Peer_Envelope_MatchId)(nil),
		(*Peer_Envelope_MatchJoinAttempt)(nil),
		(*Peer_Envelope_MathJoinAttemptReply)(nil),
		(*Peer_Envelope_MatchSendData)(nil),
		(*Peer_Envelope_MatchSignal)(nil),
		(*Peer_Envelope_MatchState)(nil),
		(*Peer_Envelope_Match)(nil),
		(*Peer_Envelope_Error)(nil),
		(*Peer_Envelope_Ping)(nil),
		(*Peer_Envelope_Pong)(nil),
		(*Peer_Envelope_MatchSignalReply)(nil),
		(*Peer_Envelope_MatchStateReply)(nil),
		(*Peer_Envelope_NkEnvelope)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_peer_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_peer_proto_goTypes,
		DependencyIndexes: file_peer_proto_depIdxs,
		EnumInfos:         file_peer_proto_enumTypes,
		MessageInfos:      file_peer_proto_msgTypes,
	}.Build()
	File_peer_proto = out.File
	file_peer_proto_rawDesc = nil
	file_peer_proto_goTypes = nil
	file_peer_proto_depIdxs = nil
}
